name: Deploy Docker image to EKS

on:
  workflow_call:
    inputs:
      image_version:
        required: true
        type: string
      environment:
        required: true
        type: string
      cluster_name:
        required: true
        type: string
      service_name:
        required: true
        type: string
      eks_config_branch:
        type: string
        required: false
        default: 'develop'
      aws_account_id:
        required: true
        type: string
      aws_account_id_ecr:
        required: false
        type: string
        default: "794071690772"
      kubctl_download_url:
        required: true
        type: string
      iam_role:
        required: true
        type: string
      github_actions_deploy_timeout:
        required: true
        type: string
      core_deployment_type:
        required: false
        type: string
        default: "both"
      local_runner:
        required: false
        type: string
        default: "self-hosted-runner-standard"
      github_oidc_role:
        required: true
        type: string

    secrets:
      repo_token:
        required: true
      NEW_RELIC_LICENSE_KEY:
        required: false

jobs:
  deploy-to-eks:
    name: Deploy ${{ inputs.image_version }} to ${{ inputs.environment }}
    runs-on: ${{ inputs.local_runner }}

    permissions:
      id-token: write

    steps:
      - name: Get runner arch
        id: runner_arch
        run: |
          arch_value=$(uname -m)
          if [ "$arch_value" = "x86_64" ]; then
            echo "runner_arch=amd64" >> $GITHUB_OUTPUT
          elif [ "$arch_value" = "aarch64" ]; then
            echo "runner_arch=arm64" >> $GITHUB_OUTPUT
          fi

      - name: Setup aws cli
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: 2
          arch: ${{ steps.runner_arch.outputs.runner_arch }}
          
      - name: Configure AWS Creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: ${{ inputs.github_oidc_role }}

      - name: Checkout EKS Config Repo
        uses: actions/checkout@v4
        with:
          repository: Littera-Education/littera-eks-config
          token: ${{ secrets.repo_token }}
          ref: ${{ inputs.eks_config_branch }}
          path: config
          fetch-depth: 0

      - name: Retag Image
        run: |

          set -e

          AUTH_TOKEN=$(aws ecr get-login-password --region us-east-1)
      
          # Assuming you are using Docker Hub, which seems to be indicated by your registry name
          REGISTRY_NAME="https://index.docker.io/v1/"
          REPOSITORY="${{ inputs.aws_account_id_ecr }}.dkr.ecr.us-east-1.amazonaws.com"
          CONTENT_TYPE="application/vnd.docker.distribution.manifest.v2+json"
      
          # Retrieve the Docker image manifest from the registry
          MANIFEST=$(curl -s -H "Authorization: Bearer ${AUTH_TOKEN}" -H "Accept: ${CONTENT_TYPE}" "${REGISTRY_NAME}/v2/${REPOSITORY}/manifests/${{ inputs.image_version }}")
          
          # Push the same manifest as a new tag
          RESPONSE_CODE=$(curl -s -o /dev/null -w "%{http_code}" -X PUT -H "Authorization: Bearer ${AUTH_TOKEN}" -H "Content-Type: ${CONTENT_TYPE}" -d "${MANIFEST}" "${REGISTRY_NAME}/v2/${REPOSITORY}/manifests/${{ inputs.environment }}")
      
          if [ "$RESPONSE_CODE" != "201" ]; then
            echo "Failed to retag image, server responded with status code $RESPONSE_CODE"
            exit 1
          fi

      # - name: Tag ECR image with environment
      #   run: |

      #     set -e

      #     aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ inputs.aws_account_id_ecr }}.dkr.ecr.us-east-1.amazonaws.com

      #     if [[ "${{ inputs.service_name }}" == "littera-core-api" ]]; then
      #       docker pull ${{ inputs.aws_account_id_ecr }}.dkr.ecr.us-east-1.amazonaws.com/littera-core:${{ inputs.image_version }}
      #       docker tag ${{ inputs.aws_account_id_ecr }}.dkr.ecr.us-east-1.amazonaws.com/littera-core:${{ inputs.image_version }} ${{ inputs.aws_account_id_ecr }}.dkr.ecr.us-east-1.amazonaws.com/littera-core:${{ inputs.environment }}
      #       docker push ${{ inputs.aws_account_id_ecr }}.dkr.ecr.us-east-1.amazonaws.com/littera-core:${{ inputs.environment }}
      #     else
      #       docker pull ${{ inputs.aws_account_id_ecr }}.dkr.ecr.us-east-1.amazonaws.com/${{ inputs.service_name }}:${{ inputs.image_version }}
      #       docker tag ${{ inputs.aws_account_id_ecr }}.dkr.ecr.us-east-1.amazonaws.com/${{ inputs.service_name }}:${{ inputs.image_version }} ${{ inputs.aws_account_id_ecr }}.dkr.ecr.us-east-1.amazonaws.com/${{ inputs.service_name }}:${{ inputs.environment }}
      #       docker push ${{ inputs.aws_account_id_ecr }}.dkr.ecr.us-east-1.amazonaws.com/${{ inputs.service_name }}:${{ inputs.environment }}
      #     fi

      - name: Deploy to EKS
        run: |

          set -e

          # install kubectl
          curl -o kubectl ${{ inputs.kubctl_download_url }}
          chmod +x ./kubectl
          mkdir -p $HOME/bin && mv ./kubectl $HOME/bin/kubectl && export PATH=$HOME/bin:$PATH

          echo "aws version:"
          aws --version

          # set and use kube context
          aws eks --region us-east-1 update-kubeconfig --name ${{ inputs.cluster_name }}

          echo "kube version"
          kubectl version || true

          # add iam role to serviceaccount annotation
          sed -i "s|eks.amazonaws.com/role-arn:\s*.*|eks.amazonaws.com/role-arn: ${{ inputs.iam_role }}|" config/${{ inputs.service_name }}/eks/eks-${{ inputs.environment }}-deployment.yaml

          # add image version to the datadog 'version' label
          sed -i "s|tags.datadoghq.com/version:\s*.*|tags.datadoghq.com/version: ${{ inputs.image_version }}|" config/${{ inputs.service_name }}/eks/eks-${{ inputs.environment }}-deployment.yaml

          # edit ECR image path in eks manifest file
          if [[ "${{ inputs.service_name }}" == "littera-core-api" ]]; then
            sed -i "s|image:\s*.*|image: ${{ inputs.aws_account_id_ecr }}.dkr.ecr.us-east-1.amazonaws.com/littera-core:${{ inputs.image_version }}|" config/${{ inputs.service_name }}/eks/eks-${{ inputs.environment }}-deployment.yaml
          else
            sed -i "s|image:\s*.*|image: ${{ inputs.aws_account_id_ecr }}.dkr.ecr.us-east-1.amazonaws.com/${{ inputs.service_name }}:${{ inputs.image_version }}|" config/${{ inputs.service_name }}/eks/eks-${{ inputs.environment }}-deployment.yaml
          fi
          
          # apply manifest and deploy
          kubectl apply -f config/${{ inputs.service_name }}/eks/eks-${{ inputs.environment }}-deployment.yaml

          echo " "
          echo "***************************************************************************************************"
          echo 
          echo "NOTE: If the action fails due to the timeout of ${{ inputs.github_actions_deploy_timeout }},"
          echo "the deployment may still have succeeded. Please contact devops in #team-devops-collab about this"
          echo 
          echo "***************************************************************************************************"
          echo " "


          if [[ "${{ inputs.service_name }}" == "littera-core-api" && "${{ inputs.core_deployment_type}}" == "both" ]]; then
            kubectl rollout restart deployment littera-core-web -n littera-services-${{ inputs.environment }}
            kubectl rollout restart deployment littera-core-worker -n littera-services-${{ inputs.environment }}
            kubectl rollout status deployment littera-core-web -n littera-services-${{ inputs.environment }} --timeout=${{ inputs.github_actions_deploy_timeout }} &
            kubectl rollout status deployment littera-core-worker -n littera-services-${{ inputs.environment }} --timeout=${{ inputs.github_actions_deploy_timeout }} &
            wait
          elif [[ "${{ inputs.service_name }}" == "littera-core-api" && "${{ inputs.core_deployment_type}}" == "core-web" ]]; then
            kubectl rollout restart deployment littera-core-web -n littera-services-${{ inputs.environment }}
            kubectl rollout status deployment littera-core-web -n littera-services-${{ inputs.environment }} --timeout=${{ inputs.github_actions_deploy_timeout }}
          else
            kubectl rollout restart deployment ${{ inputs.service_name }} -n littera-services-${{ inputs.environment }}
            echo "NOTE: If the action fails due to the timeout of ${{ inputs.github_actions_deploy_timeout }}; the deployment may still have succeeded. Please contact devops in #team-devops-collab about this"
            kubectl rollout status deployment ${{ inputs.service_name }} -n littera-services-${{ inputs.environment }} --timeout=${{ inputs.github_actions_deploy_timeout }}
          fi