name: Deploy Docker image to EKS

on:
  workflow_call:
    inputs:
      image_version:
        required: true
        type: string
      environment:
        required: true
        type: string
      cluster_name:
        required: true
        type: string
      service_name:
        required: true
        type: string
      eks_config_branch:
        type: string
        required: false
        default: "develop"
      aws_account_id:
        required: true
        type: string
      aws_account_id_ecr:
        required: false
        type: string
        default: "794071690772"
      kubctl_download_url:
        required: true
        type: string
      iam_role:
        required: true
        type: string
      github_actions_deploy_timeout:
        required: true
        type: string
      core_deployment_type:
        required: false
        type: string
        default: "both"
      local_runner:
        required: false
        type: string
        default: "self-hosted-runner-standard"
      github_oidc_role:
        required: true
        type: string

    secrets:
      repo_token:
        required: true
      NEW_RELIC_LICENSE_KEY:
        required: false

jobs:
  deploy-to-eks:
    name: Deploy ${{ inputs.image_version }} to ${{ inputs.environment }}
    runs-on: ${{ inputs.local_runner }}

    permissions:
      id-token: write

    steps:
      - name: Get runner arch
        id: runner_arch
        run: |
          arch_value=$(uname -m)
          if [ "$arch_value" = "x86_64" ]; then
            echo "runner_arch=amd64" >> $GITHUB_OUTPUT
          elif [ "$arch_value" = "aarch64" ]; then
            echo "runner_arch=arm64" >> $GITHUB_OUTPUT
          fi

      - name: Setup aws cli
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: 2
          arch: ${{ steps.runner_arch.outputs.runner_arch }}
          
      - name: Configure AWS Creds
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-region: us-east-1
          role-to-assume: ${{ inputs.github_oidc_role }}

      - name: Tag ECR image with environment
        run: |
        
          set -e
      
          # This form of token is needed for the ECR API
          AUTH_TOKEN=$(aws ecr get-authorization-token --output text --query 'authorizationData[].authorizationToken')
      
          # Set registry and repository details
          REGISTRY_NAME="https://${{ inputs.aws_account_id_ecr }}.dkr.ecr.us-east-1.amazonaws.com"
          TAG="${{ inputs.image_version }}"
          ENVIRONMENT_TAG="${{ inputs.environment }}"
          CONTENT_TYPE="application/vnd.docker.distribution.manifest.v2+json"

          if [[ "${{ inputs.service_name }}" == "littera-core-api" ]]; then
            REPOSITORY="littera-core"
          else
            REPOSITORY="${{ inputs.service_name }}"
          fi

          # Fetch the manifest of the existing image
          MANIFEST=$(curl -s -H "Authorization: Basic $AUTH_TOKEN" -H "Accept: $CONTENT_TYPE" "$REGISTRY_NAME/v2/$REPOSITORY/manifests/$TAG")
      
          # Check for curl failure
          if [ $? -ne 0 ]; then
            echo "Failed to fetch the manifest for tag $TAG."
            exit 1
          fi

          echo MANIFEST: $MANIFEST
      
          # Push the fetched manifest as a new tag
          RESPONSE_CODE=$(curl -s -o /dev/null -w "%{http_code}" -X PUT -H "Authorization: Basic $AUTH_TOKEN" -H "Content-Type: $CONTENT_TYPE" -d "$MANIFEST" "$REGISTRY_NAME/v2/$REPOSITORY/manifests/$ENVIRONMENT_TAG")
          
          # Check if the image retagging was successful
          if [ "$RESPONSE_CODE" != "201" ]; then
            echo "Failed to tag image, server responded with status code $RESPONSE_CODE."
            exit 1
          fi
          echo "Image $TAG tagged $ENVIRONMENT_TAG."

      - name: Checkout EKS Config Repo/'develop' branch
        if: ${{ inputs.cluster_name == 'littera-eks-dev3' || inputs.cluster_name == 'littera-eks-staging3' || inputs.cluster_name == 'littera-eks-production3' }}
        uses: actions/checkout@v4
        with:
          repository: Littera-Education/littera-eks-config
          token: ${{ secrets.repo_token }}
          ref: "develop"
          path: config
          fetch-depth: 0

      - name: Checkout EKS Config Repo/'community_mod' branch
        if: ${{ inputs.cluster_name == 'littera-eks-dev4' || inputs.cluster_name == 'littera-eks-staging4' || inputs.cluster_name == 'littera-eks-production4' }}
        uses: actions/checkout@v4
        with:
          repository: Littera-Education/littera-eks-config
          token: ${{ secrets.repo_token }}
          ref: "community_mod" # ${{ inputs.eks_config_branch }}
          path: config
          fetch-depth: 0

      - name: Apply Deployment and ConfigMap
        if: ${{ inputs.cluster_name == 'littera-eks-dev3' || inputs.cluster_name == 'littera-eks-staging3' || inputs.cluster_name == 'littera-eks-production3' }}
        run: |

          set -e

          # install kubectl
          curl -o kubectl ${{ inputs.kubctl_download_url }}
          chmod +x ./kubectl
          mkdir -p $HOME/bin && mv ./kubectl $HOME/bin/kubectl && export PATH=$HOME/bin:$PATH

          echo "aws version:"
          aws --version

          # set and use kube context
          aws eks --region us-east-1 update-kubeconfig --name ${{ inputs.cluster_name }}

          echo "kube version"
          kubectl version || true

          # add iam role to serviceaccount annotation
          sed -i "s|eks.amazonaws.com/role-arn:\s*.*|eks.amazonaws.com/role-arn: ${{ inputs.iam_role }}|" config/${{ inputs.service_name }}/eks/eks-${{ inputs.environment }}-deployment.yaml

          # add image version to the datadog 'version' label
          sed -i "s|tags.datadoghq.com/version:\s*.*|tags.datadoghq.com/version: ${{ inputs.image_version }}|" config/${{ inputs.service_name }}/eks/eks-${{ inputs.environment }}-deployment.yaml

          # edit ECR image path in eks manifest file
          if [[ "${{ inputs.service_name }}" == "littera-core-api" ]]; then
            sed -i "s|image:\s*.*|image: ${{ inputs.aws_account_id_ecr }}.dkr.ecr.us-east-1.amazonaws.com/littera-core:${{ inputs.image_version }}|" config/${{ inputs.service_name }}/eks/eks-${{ inputs.environment }}-deployment.yaml
          else
            sed -i "s|image:\s*.*|image: ${{ inputs.aws_account_id_ecr }}.dkr.ecr.us-east-1.amazonaws.com/${{ inputs.service_name }}:${{ inputs.image_version }}|" config/${{ inputs.service_name }}/eks/eks-${{ inputs.environment }}-deployment.yaml
          fi
          
          # apply manifest and deploy
          kubectl apply -f config/${{ inputs.service_name }}/eks/eks-${{ inputs.environment }}-deployment.yaml

          echo " "
          echo "***************************************************************************************************"
          echo 
          echo "NOTE: If the action fails due to the timeout of ${{ inputs.github_actions_deploy_timeout }},"
          echo "the deployment may still have succeeded. Please contact devops in #team-devops-collab about this"
          echo 
          echo "***************************************************************************************************"
          echo " "

          if [[ "${{ inputs.service_name }}" == "littera-core-api" && "${{ inputs.core_deployment_type}}" == "both" ]]; then
            kubectl rollout restart deployment littera-core-web -n littera-services-${{ inputs.environment }}
            kubectl rollout restart deployment littera-core-worker -n littera-services-${{ inputs.environment }}
            kubectl rollout status deployment littera-core-web -n littera-services-${{ inputs.environment }} --timeout=${{ inputs.github_actions_deploy_timeout }} &
            kubectl rollout status deployment littera-core-worker -n littera-services-${{ inputs.environment }} --timeout=${{ inputs.github_actions_deploy_timeout }} &
            wait
          elif [[ "${{ inputs.service_name }}" == "littera-core-api" && "${{ inputs.core_deployment_type}}" == "core-web" ]]; then
            kubectl rollout restart deployment littera-core-web -n littera-services-${{ inputs.environment }}
            kubectl rollout status deployment littera-core-web -n littera-services-${{ inputs.environment }} --timeout=${{ inputs.github_actions_deploy_timeout }}
          else
            kubectl rollout restart deployment ${{ inputs.service_name }} -n littera-services-${{ inputs.environment }}
            kubectl rollout status deployment ${{ inputs.service_name }} -n littera-services-${{ inputs.environment }} --timeout=${{ inputs.github_actions_deploy_timeout }}
          fi

      - name: Install yq
        if: ${{ inputs.cluster_name == 'littera-eks-dev4' || inputs.cluster_name == 'littera-eks-staging4' || inputs.cluster_name == 'littera-eks-production4' }}
        env:
          YQ_VERSION: v4.27.2
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq

      # - uses: azure/setup-kubectl@v3
      #   if: ${{ inputs.cluster_name == 'littera-eks-dev4' || inputs.cluster_name == 'littera-eks-staging4' || inputs.cluster_name == 'littera-eks-production4' }}
      #   with:
      #     version: '1.29.4'
  
      - name: Patch Deployment and Apply ConfigMap
        if: ${{ inputs.cluster_name == 'littera-eks-dev4' || inputs.cluster_name == 'littera-eks-staging4' || inputs.cluster_name == 'littera-eks-production4' }}
        env:
          service_name: ${{ inputs.service_name }}
          image_version: ${{ inputs.image_version }}
          environment: ${{ inputs.environment }}
          aws_account_id_ecr: ${{ inputs.aws_account_id_ecr }}
          create_substring: "created (server dry run)"
          change_substring: "configured (server dry run)"
          no_change_substring: "unchanged (server dry run)"
          kubctl_download_url: ${{ inputs.kubctl_download_url }}
          cluster_name: ${{ inputs.cluster_name }}
        run: |
  
          set -e

          # install kubectl
          curl -o kubectl $kubctl_download_url
          chmod +x ./kubectl
          mkdir -p $HOME/bin && mv ./kubectl $HOME/bin/kubectl && export PATH=$HOME/bin:$PATH

          kubectl --version

          manifest_path="config/$service_name/eks/eks-$environment-deployment.yaml"

          # set and use kube context
          aws eks --region us-east-1 update-kubeconfig --name $cluster_name

          # edit ECR image path in eks manifest file
          if [[ $service_name == "littera-core-api" ]]; then
              sed -i "s|image:\s*.*|image: $aws_account_id_ecr.dkr.ecr.us-east-1.amazonaws.com/littera-core:$image_version|" $manifest_path
          else
              sed -i "s|image:\s*.*|image: $aws_account_id_ecr.dkr.ecr.us-east-1.amazonaws.com/$service_name:$image_version|" $manifest_path
          fi

          # add image version to the datadog 'version' label
          sed -i "s|tags.datadoghq.com/version:\s*.*|tags.datadoghq.com/version: $image_version|" $manifest_path

          yq eval 'select(.kind == "Deployment")' "$manifest_path" > deployments.yaml
          if [ -s deployments.yaml ]; then
              deployment_dryrun=$(kubectl apply --dry-run=server -f deployments.yaml)
              echo deployment_dryrun: "$deployment_dryrun"
              if grep -q "$change_substring" <<< "$deployment_dryrun" || grep -q "$create_substring" <<< "$deployment_dryrun"; then
                  deployment_restart=true
              elif grep -q "$no_change_substring" <<< "$deployment_dryrun"; then
                  deployment_restart=false
              fi
              echo deployment_restart: "$deployment_restart"
          fi

          yq eval 'select(.kind == "ConfigMap")' "$manifest_path" > configmaps.yaml
          if [ -s configmaps.yaml ]; then
              configmap_dryrun=$(kubectl apply --dry-run=server -f configmaps.yaml)
              echo configmap_dryrun: "$configmap_dryrun"
              if grep -q "$change_substring" <<< "$configmap_dryrun" || grep -q "$create_substring" <<< "$configmap_dryrun"; then
                  configmap_restart=true
              elif grep -q "$no_change_substring" <<< "$configmap_dryrun"; then
                  configmap_restart=false
              fi
              echo configmap_restart: "$configmap_restart"
          fi

          if [[ $deployment_restart == true ]] ; then
              echo "no rolling restart required"
              kubectl apply -f configmaps.yaml
              kubectl apply -f deployments.yaml
              if [[ $service_name == "littera-core-api" ]]; then
                  kubectl rollout status deployment/littera-core-web deployment/littera-core-worker -n littera-services-$environment
              else
                  kubectl rollout status deployment $service_name -n littera-services-$environment
              fi

          elif [[ $deployment_restart == false && $configmap_restart == true ]]; then
              echo "rolling restart required"
              kubectl apply -f configmaps.yaml
              if [[ $service_name == "littera-core-api" ]]; then
                  kubectl rollout restart deployment littera-core-web -n littera-servies-$environment
                  kubectl rollout restart deployment littera-core-worker -n littera-servies-$environment
                  kubectl rollout status deployment/littera-core-web deployment/littera-core-worker -n littera-services-$environment
              else
                  kubectl rollout restart deployment $service_name -n littera-services-$environment
                  kubectl rollout status deployment $service_name -n littera-services-$environment
              fi
          fi