name: Build and push NextJS docker image to ECR

on:
  workflow_call:
    inputs:
      nexus_host_domain:
        required: true
        type: string
      node_version:
        type: string
        default: "18"
      local_runner:
        required: false
        type: string
        default: "self-hosted-runner-standard"
      service_name:
        required: true
        type: string
      environment:
        required: true
        type: string
      test_tag_suffix:
        required: false
        type: string
      aws_account_id_ecr:
        required: false
        type: string
        default: "794071690772"
      github_oidc_role:
        required: true
        type: string
      eks_config_branch:
        type: string
        required: false
        default: "develop"

    secrets:
      nexus_username:
        required: true
      nexus_password:
        required: true
      nexus_npm_login:
        required: true
      github_actions_token:
        required: true

    outputs:
      version:
        description: "artifact version"
        value: ${{ jobs.release_versioning.outputs.version }}

jobs:
  release_versioning:
    name: Release Versioning
    runs-on: ${{ inputs.local_runner }}

    outputs:
      version: ${{ steps.get-version.outputs.VERSION }}

    permissions:
      contents: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}

      - name: Extract branch name
        id: extract_branch_name
        run: |
          echo "branch_name=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
          echo "branch_name=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"

      - name: Release Please
        id: release-please
        if: steps.extract_branch_name.outputs.branch_name  == 'main'
        uses: googleapis/release-please-action@v4
        with:
          release-type: node
          token: ${{ secrets.github_actions_token }}
          target-branch: ${{ github.ref_name }}

      - name: Get Release PR Title
        uses: actions/github-script@v7
        id: release-pr-title
        if: steps.extract_branch_name.outputs.branch_name == 'main'
        with:
          script: |
            const prs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
            })

            const releasepr = prs.data.filter(pr => pr.title.includes("chore(main): release"))
            console.log(releasepr)

            if(releasepr.length > 0) {
              return releasepr.pop().title
            }

            console.log('No pending release prs found')
          result-encoding: string

      - name: Get Deployable Version
        id: get-version
        run: |
          if [ "${{ steps.release-please.outputs.release_created }}" ]; then
            version="$(npm pkg get version | xargs echo)"
          elif [ "${{ steps.release-pr-title.outputs.result }}" != "undefined" ] && [ "${{ steps.extract_branch_name.outputs.branch_name }}" == "main" ]; then
            version="${{ steps.release-pr-title.outputs.result }}"
            echo $version
            versionparts=($version)
            echo ${versionparts[-1]}
            version="${versionparts[-1]}-SNAPSHOT-$(date +%Y-%m-%d-%H-%M-%S)"
          else
            echo "WARN: Unable to get version from release-please, defaulting to package.json"
            version="$(npm pkg get version | xargs echo)-SNAPSHOT-$(date +%Y-%m-%d-%H-%M-%S)"
          fi

          echo "version=$version" >> $GITHUB_OUTPUT

  npm_docker_build:
    name: NextJS Docker Build and Push
    runs-on: ${{ inputs.local_runner }}
    needs: [ release_versioning ]

    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Checkout EKS Config Repo/'${{ inputs.eks_config_branch }}' branch
        uses: actions/checkout@v4
        with:
          repository: Littera-Education/littera-eks-config
          token: ${{ secrets.repo_token }}
          ref: ${{ inputs.eks_config_branch }}
          path: config
          fetch-depth: 0

      - name: Setup .npmrc for pulling & publishing to Nexus
        run: |
          FULL_REPO_AUTH="//${{ inputs.nexus_host_domain }}/repository/:_auth=${{ secrets.nexus_npm_login }}"
          echo -e "\n" \
            "registry=https://${{ inputs.nexus_host_domain }}/repository/npm-public\n" \
            "$FULL_REPO_AUTH\n" \
            "//${{ inputs.nexus_host_domain }}/repository/npm-local:_auth=${{ secrets.nexus_npm_login }}\n" \
            "email=${{ secrets.nexus_username }}\n" \
            "always-auth=true\n" \ >> .npmrc

      - name: Get runner arch
        id: runner_arch
        run: |
          arch_value=$(uname -m)
          if [ "$arch_value" = "x86_64" ]; then
            echo "runner_arch=amd64" >> $GITHUB_OUTPUT
          elif [ "$arch_value" = "aarch64" ]; then
            echo "runner_arch=arm64" >> $GITHUB_OUTPUT
          fi

      - name: Setup aws cli
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: 2
          arch: ${{ steps.runner_arch.outputs.runner_arch }}
      
      - name: Configure AWS Creds
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-region: us-east-1
          role-to-assume: ${{ inputs.github_oidc_role }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build, tag, and push docker image to Amazon ECR
        run: |
          set -e

          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ inputs.aws_account_id_ecr }}.dkr.ecr.us-east-1.amazonaws.com

          manifest_path="config/${{ inputs.service_name }}/eks/eks-${{ inputs.environment }}-deployment.yaml"

          echo $manifest_path
          exit 1

          DOCKER_BUILDKIT=1 docker build . -t ${{ inputs.service_name }} --secret id=npmrc,src=./.npmrc
          if [ -z "${{ inputs.test_tag_suffix }}" ]; then
            docker tag ${{ inputs.service_name }}:latest ${{ inputs.aws_account_id_ecr }}.dkr.ecr.us-east-1.amazonaws.com/${{ inputs.service_name }}:${{ needs.release_versioning.outputs.version }}
            docker push ${{ inputs.aws_account_id_ecr }}.dkr.ecr.us-east-1.amazonaws.com/${{ inputs.service_name }}:${{ needs.release_versioning.outputs.version }}
          else
            docker tag ${{ inputs.service_name }}:latest ${{ inputs.aws_account_id_ecr }}.dkr.ecr.us-east-1.amazonaws.com/${{ inputs.service_name }}:${{ needs.release_versioning.outputs.version }}-${{ inputs.test_tag_suffix }}
            docker push ${{ inputs.aws_account_id_ecr }}.dkr.ecr.us-east-1.amazonaws.com/${{ inputs.service_name }}:${{ needs.release_versioning.outputs.version }}-${{ inputs.test_tag_suffix }}
          fi

