name: Build and push NextJS docker image to ECR

on:
  workflow_call:
    inputs:
      nexus_host_domain:
        required: true
        type: string
      node_version:
        type: string
        default: "18"
      local_runner:
        required: false
        type: string
        default: "self-hosted-runner-standard-v2"
      service_name:
        required: true
        type: string
      environment:
        required: true
        type: string
      test_tag_suffix:
        required: false
        type: string
      aws_account_id_ecr:
        required: false
        type: string
        default: "794071690772"
      github_oidc_role:
        required: true
        type: string
      eks_config_branch:
        type: string
        required: false
        default: "develop"
      git_tag:
        type: string
        required: true
        default: "main"

    secrets:
      nexus_username:
        required: true
      nexus_password:
        required: true
      nexus_npm_login:
        required: true
      github_actions_token:
        required: true
      repo_token:
        required: true
      dockerhub_username:
        required: false
      dockerhub_token:
        required: false

    outputs:
      artifact_version:
        description: "artifact version"
        value: ${{ jobs.release_versioning.outputs.version }}
      image_version:
        description: "image version"
        value: ${{ jobs.npm_docker_build.outputs.image_version }}

jobs:
  release_versioning:
    name: Release Versioning
    runs-on: ${{ inputs.local_runner }}

    outputs:
      version: ${{ steps.get-version.outputs.version }}

    permissions:
      contents: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
          ref: ${{ inputs.git_tag }}

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}

      - name: Release Please
        id: release-please
        if: inputs.git_tag  == 'main'
        uses: googleapis/release-please-action@v4
        with:
          release-type: node
          token: ${{ secrets.github_actions_token }}
          target-branch: ${{ github.ref_name }}

      - name: Get Release PR Title
        uses: actions/github-script@v7
        id: release-pr-title
        if: inputs.git_tag == 'main'
        with:
          script: |
            const prs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
            })

            const releasepr = prs.data.filter(pr => pr.title.includes("chore(main): release"))
            console.log(releasepr)

            if(releasepr.length > 0) {
              return releasepr.pop().title
            }

            console.log('No pending release prs found')
          result-encoding: string

      - name: Get Deployable Version
        id: get-version
        run: |
          if [ "${{ steps.release-please.outputs.release_created }}" ]; then
            version="$(npm pkg get version | xargs echo)"
          elif [ "${{ steps.release-pr-title.outputs.result }}" != "undefined" ] && [ "${{ inputs.git_tag }}" == "main" ]; then
            version="${{ steps.release-pr-title.outputs.result }}"
            echo $version
            versionparts=($version)
            echo ${versionparts[-1]}
            version="${versionparts[-1]}-SNAPSHOT-$(date +%Y-%m-%d-%H-%M-%S)"
          else
            echo "WARN: Unable to get version from release-please, defaulting to package.json"
            version="$(npm pkg get version | xargs echo)-SNAPSHOT-$(date +%Y-%m-%d-%H-%M-%S)"
            echo ${version}
          fi

          echo "version=$version" >> $GITHUB_OUTPUT