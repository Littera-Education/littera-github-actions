name: Sharded test
# Used only by littera-core-ui

on:
  workflow_call:
    inputs:
      nexus_host_domain:
        required: true
        type: string
      node_version:
        type: string
        default: "18"
      custom_npm_install_command:
        type: string
        default: skip
      package_manager:
        type: string
        default: npm
      local_runner:
        required: false
        type: string
        default: "self-hosted-runner-standard-v2"

    secrets:
      nexus_username:
        required: true
      nexus_npm_login:
        required: true
      sonar_token:
        required: true

    outputs:
      version:
        description: 'artifact version'
        value: ${{ jobs.after_shards.outputs.version }}
      artifact_id:
        description: 'artifact id'
        value: ${{ jobs.after_shards.outputs.artifact_id }}

jobs:
  test-shards:
    name: NPM (or Yarn) Sharded Tests
    runs-on: ${{ inputs.local_runner }}

    strategy:
      matrix:
        shard: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

    steps:
      - name: install git
        run: |
          sudo apt-get update &&
          sudo apt-get install -y git
          
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}

      - name: Install yarn
        if: ${{ inputs.package_manager != 'npm' }}
        run: npm install -g yarn

      - name: Setup .npmrc for pulling & publishing to Nexus
        run: |
          if [ "${{ inputs.package_manager }}" == "berry" ]; then
            yarn config set npmAlwaysAuth true
            yarn config set npmAuthIdent ${{ secrets.nexus_npm_login }}
            yarn config set npmRegistryServer https://${{ inputs.nexus_host_domain }}/repository/npm-public

            yarn config set 'npmRegistries["//${{ inputs.nexus_host_domain }}/repository/npm-local/"].npmAuthIdent' ${{ secrets.nexus_npm_login }}
            yarn config set 'npmRegistries["//${{ inputs.nexus_host_domain }}/repository/npm-local/"].npmAlwaysAuth' true
          elif [ "${{ inputs.package_manager }}" == "yarn" ]; then
            FULL_REPO_AUTH="_auth=${{ secrets.nexus_npm_login }}"
            echo -e "\n" \
                "registry=https://${{ inputs.nexus_host_domain }}/repository/npm-public\n" \
                "$FULL_REPO_AUTH\n" \
                "//${{ inputs.nexus_host_domain }}/repository/npm-local:_auth=${{ secrets.nexus_npm_login }}\n" \
                "email=${{ secrets.nexus_username }}\n" \
                "always-auth=true\n" \ >> .npmrc
          elif [ "${{ inputs.package_manager }}" == "npm" ]; then
              FULL_REPO_AUTH="//${{ inputs.nexus_host_domain }}/repository/:_auth=${{ secrets.nexus_npm_login }}"
              echo -e "\n" \
                "registry=https://${{ inputs.nexus_host_domain }}/repository/npm-public\n" \
                "$FULL_REPO_AUTH\n" \
                "//${{ inputs.nexus_host_domain }}/repository/npm-local:_auth=${{ secrets.nexus_npm_login }}\n" \
                "email=${{ secrets.nexus_username }}\n" \
                "always-auth=true\n" \ >> .npmrc
          fi

      - name: Yarn Install Dependencies
        if: ${{ inputs.package_manager != 'npm' }}
        run: yarn install

      - name: Yarn Test
        if: ${{ inputs.package_manager != 'npm' }}
        run: yarn test --shard=${{ matrix.shard }}/${{ strategy.job-total }} --coverage

      - name: Install dependencies (with cache)
        if: ${{ inputs.package_manager == 'npm' && inputs.custom_npm_install_command == 'skip' }}
        uses: bahmutov/npm-install@v1

      - name: Custom Install dependencies (with cache)
        if: ${{ inputs.package_manager == 'npm' && inputs.custom_npm_install_command != 'skip' }}
        uses: bahmutov/npm-install@v1
        with:
          install-command: ${{ inputs.custom_npm_install_command }}

      - name: Execute Unit Tests
        run: npm run test:cov -- --shard=${{ matrix.shard }}/${{ strategy.job-total }}

      - name: Merge Coverage
        run: mv coverage/lcov.info coverage/lcov_${{matrix.shard}}.info

      - name: Upload coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage-artifacts
          path: coverage/

  report-coverage:
    runs-on: ${{ inputs.local_runner }}
    needs: [test-shards]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}

      - name: Extract Version
        id: extract-version
        run: |
          echo "currentVersion=$(npm pkg get version | xargs echo)" >> $GITHUB_OUTPUT

      - uses: actions/download-artifact@v3
        with:
          name: coverage-artifacts
          path: coverage

      - name: Merge Code Coverage
        run: npx lcov-result-merger 'coverage/lcov_*.info' 'coverage/lcov.info' --legacy-temp-file

        # https://docs.sonarqube.org/latest/analyzing-source-code/scanners/sonarscanner/
      - name: Run Sonar Analysis
        env:
          SONAR_TOKEN: ${{ secrets.sonar_token }}
        run: npx sonarqube-scanner -Dsonar.projectVersion=${{ steps.extract-version.outputs.currentVersion }}

  after-shards:
    runs-on: ${{ inputs.local_runner }}
    needs: [test-shards, report-coverage]

    if: success()

    outputs:
      success: ${{ steps.setsuccess.outputs.testShardsSuccess }}
      version: ${{ steps.get-project-info.outputs.VERSION }}
      artifact_id: ${{ steps.get-project-info.outputs.ARTIFACTID }}

    steps:
      - id: setsuccess
        name: Extract Test Shards Success
        run: |
          echo "testShardsSuccess=true" >> $GITHUB_OUTPUT

      - name: Get Project Info
        id: get-project-info
        run: |
          echo "ARTIFACTID=$(npm pkg get name | xargs echo)" >> $GITHUB_OUTPUT
          echo "VERSION=$(npm pkg get version | xargs echo)" >> $GITHUB_OUTPUT

  gate:
    name: Quality Gate
    runs-on: ${{ inputs.local_runner }}
    needs: [test-shards, report-coverage, after-shards]

    if: always()

    steps:
      - run: |
          passed="${{ needs.after-shards.outputs.success }}"
          if [[ $passed == "true" ]]; then
            echo "Tests passed"
            exit 0
          else
            echo "Tests failed"
            exit 1
          fi
