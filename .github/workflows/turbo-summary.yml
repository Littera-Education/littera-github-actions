name: Turborepo - Summary

on:
  workflow_call:
    inputs:
      local_runner:
        required: false
        type: string
        default: "self-hosted-runner-standard"
      all_apps:
        required: true
        type: string
      pending_apps:
        required: true
        type: string

    secrets:
      github_actions_token:
        required: true

jobs:
  turbo-summary:
    name: Turbo Summary
    if: always()
    runs-on: ${{ inputs.local_runner }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Summarize Job Results (JavaScript)
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.github_actions_token }}
          script: |
            function didStepFail(status) {
              return status === 'failure'
            }

            function didStepSucceed(status) {
              return status === 'success'
            }

            function emojiStatus(status) {
              return didStepSucceed(status) ? '✅' : didStepFail(status) ? '❌' : '-'
            }

            async function summarizeJobs() {
              const turboAppsPending = ${{ inputs.pending_apps }}
              const turboAppsAll = ${{ inputs.all_apps }}

              const jobs = await github.rest.actions.listJobsForWorkflowRun({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: context.workflow.id,
                run_id: context.runId
              })

              const tableMap = turboAppsAll.map(app => {
                const lintingJob = jobs.data.jobs.find(j => j.name.includes(`Turbo Lint`) && j.name.includes(app))
                const testingJob = jobs.data.jobs.find(j => j.name.includes(`Turbo Test`) && j.name.includes(app))
                const tfVarsJob = jobs.data.jobs.find(j => j.name.includes(`Vercel TF`) && j.name.includes(app))
                const deployJob = jobs.data.jobs.find(j => j.name.includes(`Building & Deploying`) && j.name.includes(app))

                return {
                  app,
                  linting: lintingJob ? lintingJob.conclusion : 'skipped',
                  testing: testingJob ? testingJob.conclusion : 'skipped',
                  tfVars: tfVarsJob ? tfVarsJob.conclusion : 'skipped',
                  deploying: deployJob ? deployJob.conclusion : 'skipped',
                }
              })

              const coreSummary = core.summary
                .addHeading('Job Report', 1)
                .addTable([
                  [{data: 'Application', header: true}, {data: 'Lint', header: true}, {data: 'Testing', header: true}, {data: 'TF Vars', header: true}, {data: 'Deploying', header: true}],
                  ...tableMap.map(({ app, linting, testing, tfVars, deploying }) => [app, emojiStatus(linting), emojiStatus(testing), emojiStatus(tfVars), emojiStatus(deploying)])
                ])

              await coreSummary.write()
            }

            summarizeJobs()